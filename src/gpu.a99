       xorg gpu_program_tmp

*      Copy the GPU program into GPU RAM (>4000 - )
       li   r0,gpu_prg_high_start
       li   r1,gpu_program
       li   r2,gpu_prg_high_end - gpu_program  - gpu_program_tmp
gpu_copy:
       mov  *r0+,*r1+
       dect r2
       jne  gpu_copy
       b    @gpu_program

gpu_prg_high_start:
       equ  $

       xorg gpu_program

       li   r15,>47fe                  ; Stack pointer
gpu_loop:
       idle
       mov  @gpu_dx,r0
       mov  @gpu_dy,r1
       mov  @gpu_x,r2
       mov  @gpu_y,r3
       call @draw_bitmap
       jmp  gpu_loop

*********************************************************************************
*
* Draw bitmap
*
* r0: dx is the x-coordinate of the vector that's added to the source map position each step (FP 8.8)
* r1: dy is the y-coordinate of the vector that's added to the source map position each step (FP 8.8)
* r2: Center x in source map coordinates x (FP 8.8, XXXXXXXX.xxxxxxxx).
*     Values of 0-255 are within bounds of source map (each wide pixel has two positions).
* r3: Bottom y in source map coordinates y (FP 8.8, YYYYYYYY.yyyyyyyy).
*     Values of 0-127 are within bounds of source map.
*
* Source address is calculated as 000YYYYY.YYXXXXXX
*
draw_bitmap:
*      Init
;       sla  r0,1                       ; Adjust so that >0100 corresponds to scale 1
;       sla  r1,1                       ; Disabled for 3D not to waste bits
       li   r4,bitmap_dst + (bitmap_dst_height - 1) * (bitmap_width / 2)
       clr  r5                         ; Row index * 2, bottom row = 0
       clr  r10
       li   r11,>0200                  ; x bit determining left or right pixel
draw_bitmap_1:
       li   r6,bitmap_width/2          ; Column counter
       push r2                         ; Save x
       push r3                         ; Save y
*      Scale x
       mov  r0,r7                      ; dx
       mov  @scale_table(r5),r8        ; scale
       call @gpu_mpy_fp88              ; Calculate dx * scale
       mov  r7,r13                     ; stepX = dx * scale
       call @gpu_mpy_fp214             ; Calculate 64 * stepX in r8
       s    r8,r2                      ; x -= 64 * stepX
       s    r8,r3                      ; y -= 64 * stepX
*      Scale y
       mov  r1,r7                      ; dy
       mov  @scale_table(r5),r8        ; z
       call @gpu_mpy_fp88              ; Calculate dy * scale
       mov  r7,r14                     ; stepY = dy * (z + s0)
       call @gpu_mpy_fp214             ; Calculate 64 * stepY in r8
       a    r8,r2                      ; x += 64 * stepY
       s    r8,r3                      ; y -= 64 * stepY
       .ifeq debug,1
       call @plot
       .endif
draw_bitmap_2:
*      Left destination pixel
       mov  r2,r9                      ; XXXXXXXX.xxxxxxxx
       swpb r9                         ; 00000000.XXXXXXXX
       movb r3,r9                      ; YYYYYYYY.XXXXXXXX
       sla  r9,1                       ; YYYYYYYX.XXXXXXX0
       srl  r9,3                       ; 000YYYYY.YYXXXXXX
       movb @bitmap_src(r9),r10
*      Isolate pixel in left nybble
       coc  r11,r2                     ; Left or right pixel?
       jne  draw_bitmap_3
       sla  r10,4                      ; Move right pixel into position
       jmp  draw_bitmap_3a
draw_bitmap_3:
       andi r10,>f000
draw_bitmap_3a:
*      Move x and y to next pixel
       a    r13,r2                     ; x += stepX
       a    r14,r3                     ; y += stepY
*      Right destination pixel
       mov  r2,r9                      ; XXXXXXXX.xxxxxxxx
       swpb r9                         ; 00000000.XXXXXXXX
       movb r3,r9                      ; YYYYYYYY.XXXXXXXX
       sla  r9,1                       ; YYYYYYYX.XXXXXXX0
       srl  r9,3                       ; 000YYYYY.YYXXXXXX
       movb @bitmap_src(r9),r12
*      Isolate pixel in right nybble
       coc  r11,r2                     ; Left or right pixel?
       jeq  draw_bitmap_4
       srl  r12,4                      ; Move left pixel into position
       jmp  draw_bitmap_4a
draw_bitmap_4:
       andi r12,>0f00
draw_bitmap_4a:
*      Move x and y to next pixel
       a    r13,r2                     ; x += stepX
       a    r14,r3                     ; y += stepY
*      Write to destination
       socb r12,r10                    ; Combine left and right pixels
       movb r10,*r4+                   ; Write byte to destination
*      Next column
       dec  r6
       jne  draw_bitmap_2
*      Next row
       .ifeq debug,1
       call @plot
       .endif
       pop  r3                         ; Restore y
       pop  r2                         ; Restore x
       ai   r4,-bitmap_width           ; Move destination 2 lines up
       inct r5
       ci   r5,bitmap_dst_height*2
       jne  draw_bitmap_1
       ret
*// draw_bitmap

*********************************************************************
*
* Fixed point 8.8 multiplication
*
* r7: Multiplicand (FP 8.8)
* r8: Multiplier (FP 8.8)
*
* On return r7 contains multiplied value as FP 8.8.
* r8 contains the multiplied value as FP 2.14,
* or times 64 with more decimals.
*
gpu_mpy_fp88:
       clr  r9                         ; Sign (0 means positive)
       mov  r7,r7                      ; Test sign
       jgt  gpu_mpy_fp88_1
       neg  r7                         ; Make positive
       inv  r9                         ; Flip sign (-1 means negative)
gpu_mpy_fp88_1:
       mov  r8,r8                      ; Test sign
       jgt  gpu_mpy_fp88_2
       neg  r8                         ; Make positive
       inv  r9                         ; Flip sign
gpu_mpy_fp88_2:
       mpy  r8,r7                      ; Multiply the numbers
       movb r8,r7                      ; We need the MSB of r8 (decimals)
       swpb r7                         ; And the LSB of r7 (whole number) in reverse order
       mov  r9,r9                      ; Test sign
       jeq  gpu_mpy_fp88_3             ; Jump if sign positive
       neg  r7                         ; Negate result
       neg  r8
gpu_mpy_fp88_3:
       ret
*// gpu_mpy_fp88

*********************************************************************
*
* Construct result from gpu_mpy_fp88 as FP 2.14 in r8
*
gpu_mpy_fp214:
       mov  r7,r9                      ; 77777777.88888888
       sla  r9,6                       ; 77888888.88000000
       sra  r8,2                       ; 00888888.88888888
       andi r8,>003f                   ; 00000000.00888888
       soc  r9,r8                      ; 77888888.88888888
       ret
*// gpu_mpy_fp214

*********************************************************************
*
* Plot a point on the source bitmap
*
* r2: x (FP 8.8)
* r3: y (FP 8.8)
*
plot:
       push r9
       push r10
       push r11
       mov  r2,r9                      ; XXXXXXXX.xxxxxxxx
       swpb r9                         ; 00000000.XXXXXXXX
       movb r3,r9                      ; YYYYYYYY.XXXXXXXX
       sla  r9,1                       ; YYYYYYYX.XXXXXXX0
       srl  r9,3                       ; 000YYYYY.YYXXXXXX
       movb @bitmap_src(r9),r10
       li   r11,>0200
       coc  r11,r2                     ; Left or right pixel?
       jne  plot_1
       andi r10,>f000
       ori  r10,>0100
       jmp  plot_2
plot_1:
       andi r10,>0f00
       ori  r10,>1000
plot_2:
       movb r10,@bitmap_src(r9)
       pop  r11
       pop  r10
       pop  r9
       ret
*// plot

*********************************************************************
*
* Data
*
       copy "scale-table.a99"

gpu_prg_high_end:
       equ  $

       aorg
