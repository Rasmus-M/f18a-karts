*********************************************************************
*
* Mode 7 demo
* For the TI-99/4A home computer
*
* January 2024 -
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*

       copy "macros.a99"

**
* Constants
*
screen_width_char:
       equ  32
screen_height_char:
       equ  30
screen_size_char:
       equ  screen_width_char*screen_height_char
screen_width:
       equ  screen_width_char*8
screen_height:
       equ  screen_height_char*8
bitmap_top:
       equ  40
bitmap_width:
       equ  128
bitmap_dst_height:
       equ  64
bitmap_gap_height:
       equ  8
bitmap_src_top:
       equ  bitmap_top+bitmap_dst_height+bitmap_gap_height
bitmap_src_height:
       equ  128
bitmap_height:
       equ  bitmap_dst_height+bitmap_gap_height+bitmap_src_height

**
* Memory mapped addresses
*
vdpwd:                                 ; VDP write data
       equ  >8c00
vdpwa:                                 ; VDP set read/write address
       equ  >8c02
vdprd:                                 ; VDP read data
       equ  >8800
vdpsta:                                ; VDP status
       equ  >8802
sound:                                 ; Sound
       equ  >8400
spchwt:
       equ  >9400
spchrd:
       equ  >9000


**
* VDP memory map
*
gpu_program_tmp:
       equ  >0000
bitmap_base:
       equ  >0000
bitmap_dst:                            ; 128 x 192 x 4 bbp = 12K
       equ  bitmap_base
bitmap_gap:
       equ  bitmap_base + (bitmap_dst_height * bitmap_width / 2)
bitmap_src:
       equ  bitmap_gap + (bitmap_gap_height * bitmap_width / 2)
sprite_attr_table:                     ; Sprite attribute table
       equ  >3200
gpu_data:
       equ  >3280
tile_attr_table:                       ; Tile attribute table
       equ  >3300
name_table:                            ; Name table (note: we probably only need 4-6 rows of this)
       equ  >3400
pattern_table:                         ; Pattern table
       equ  >3800
sprite_pattern_table:                  ; Sprite pattern table
       equ  >3800
sprite_pattern_table_p1:               ; Sprite pattern table plane 1
       equ  >3c00
gpu_program:
       equ  >4000

**
* Scratch pad
*
pad:
       equ  >8300
wrksp:
       equ  pad                        ; Workspace
lsb_r0:
       equ  wrksp+1
r1lb:
       equ  wrksp+3
r2lb:
       equ  wrksp+5
r3lb:
       equ  wrksp+7
wrksp2:
       equ  wrksp+>20
stack:
       equ  wrksp2+>20
**
* PAD constants
*
padcon:
       equ  stack+>16                  ; Start of pad constants
one:
       equ  padcon
**
* PAD variables
*
padvar:                                ; Start of pad variables
       equ  one+2
frame:
       equ padvar
vdp_copy_pad:
       equ  frame+2
pad_max:
       equ  vdp_copy_pad+22

********************************************************************************
*
* Main program
*
       aorg >2000
main:
       limi 0                          ; Interrupts off
       lwpi wrksp                      ; Setup workspace
       li   r10,stack                  ; Setup stack pointer
       li   r15,vdpwd
       bl   @one_time_init
*      Run GPU program, which moves it into high GPU RAM
       li   r0,gpu_program_tmp/256+>3600
       bl   @vwtr
       li   r0,gpu_program_tmp%256+>3700
       bl   @vwtr
loop:
       bl   @vsync
       bl   @wait_gpu
*      x
       mov  @x,r1
       li   r0,gpu_x
       bl   @vsww
       mov  @angle,r1
       bl   @cos
       mov  @zoom,r2
       bl   @mpy_fp88
       mov  r1,@dx
       li   r0,gpu_dx
       bl   @vsww
*      y
       mov  @y,r1
       li   r0,gpu_y
       bl   @vsww
       mov  @angle,r1
       bl   @sin
       mov  @zoom,r2
       bl   @mpy_fp88
       mov  r1,@dy
       li   r0,gpu_dy
       bl   @vsww
*      Trigger GPU
       li   r0,>3801
       bl   @vwtr
*      Update parameters
       bl   @user_input
*      Display sprites
       bl   @display_sprites
*      loop
       jmp  loop
x:                                     ; FP 8.8
       data >8000
y:                                     ; FP 8.8
       data >4000
dx:                                    ; FP 8.8
       data ->0100
dy:                                    ; FP 8.8
       data >0000
angle:                                 ; 0 - 255
       data 0
zoom:                                  ; FP 8.8
       data >0100

*********************************************************************
*
* Wait for vertical retrace (CRU)
*
vsync:
       .proc
       movb @vdpsta,r12
vsync_1:
       clr  r12
       tb   2                          ; Test CRU bit for VDP interrupt
       jeq  vsync_1
       movb @vdpsta,r12
       .endproc
*// vsync

*********************************************************************************
*
* Wait for the GPU to be idle
*
wait_gpu:
       .proc
       li   r0,>0f02
       bl   @vwtr
wait_gpu_1:
       movb @vdpsta,r0
       jlt  wait_gpu_1
       .endproc
*// wait_gpu

*********************************************************************************
*
* User input
*
user_input:
       .proc
       clr  r1
       li   r0,JOY_FI
       bl   @check_key
       jeq  user_input_0
       inc  r1
user_input_0:
*      Left
       tb   1
       jeq  user_input_1
       abs  r1
       jne  user_input_0a
       dect @angle
       jmp  user_input_1
user_input_0a:
       s    @dx,@x
       s    @dy,@y
user_input_1:
*      Right
       tb   2
       jeq  user_input_2
       abs  r1
       jne  user_input_1a
       inct @angle
       jmp  user_input_2
user_input_1a:
       a    @dx,@x
       a    @dy,@y
user_input_2:
*      Forward
       tb   3
       jeq  user_input_3
       s    @dy,@x
       a    @dx,@y
user_input_3:
*      Backward
       tb   4
       jeq  user_input_4
       a    @dy,@x
       s    @dx,@y
user_input_4:
       .endproc
*// user_input

*********************************************************************************
*
* Display sprites
*
display_sprites:
       .proc
       li   r0,sprite_attr_table
       bl   @vwad
       mov  @y,r1
       andi r1,>7f00
       ai   r1,->0800
       ai   r1,bitmap_src_top*256
       movb r1,*r15
       mov  @x,r1
       ai   r1,->0800
       movb r1,*r15
       li   r1,>0000
       movb r1,*r15
       swpb r1
       movb r1,*r15
       .endproc
*// display_sprites

*********************************************************************************
*
* One time initializations
*
one_time_init:
       .proc
       li   r0,1
       mov  r0,@one
       bl   @clear_pad
       bl   @copy_vdp_copy_to_pad
       bl   @graphics_mode
       bl   @init_vdp_ram
       .endproc
*// one_time_init

*********************************************************************************
*
* Clear PAD
*
clear_pad:
       li   r1,padvar
       li   r2,pad_max-padvar
clear_pad_1:
       clr  *r1+
       dect r2
       jne  clear_pad_1
       rt
*// clear_pad

*********************************************************************************
*
* Copy VDP copy to PAD
*
copy_vdp_copy_to_pad:
       li   r0,vdp_copy
       li   r1,vdp_copy_pad
       li   r2,vdp_copy_end-vdp_copy
copy_vdp_copy_to_pad_1:
       mov  *r0+,*r1+
       dect r2
       jne copy_vdp_copy_to_pad_1
       rt
*// copy_vdp_copy_to_pad

*********************************************************************************
*
* Set graphics mode
*
graphics_mode:
       .proc
       li   r1,vregs2
graphics_mode_1:
       mov  *r1+,r0
       jlt  graphics_mode_2
       bl   @vwtr                      ; Set register
       jmp  graphics_mode_1
*      Return
graphics_mode_2:
       .endproc
*      VDP registers
vregs2:
       byte >39,>1c                        ; Unlock F18A
       byte >39,>1c                        ; Unlock F18A
       byte >00,>00                        ; Graphics I mode
       byte >01,>e2                        ; 16K, display on, interrupts enabled
       byte >02,name_table/>400            ; Name table
       byte >03,tile_attr_table/>40        ; Tile attribute table
       byte >04,pattern_table/>800         ; Pattern table
       byte >05,sprite_attr_table/>80      ; Sprite attribute table
       byte >06,sprite_pattern_table/>800  ; Sprite pattern table
       byte >07,>01                        ; Backdrop color
       byte >1d,>44                        ; 1K bytes between sprite + tile planes
       byte >1f,>d0                        ; Bitmap enable, fat pixels
       byte >20,bitmap_dst/>40             ; Bitmap address
       byte >21,>00                        ; Bitmap x
       byte >22,bitmap_top                 ; Bitmap y
       byte >23,>00                        ; Bitmap width
       byte >24,bitmap_height              ; Bitmap height
       byte >31,>6a                        ; ROW30, ECM2 tiles + sprites, real y coord
       byte >33,>01                        ; Stop sprite
       data -1
*// graphics_mode

*********************************************************************************
*
* Initialize VDP RAM
*
init_vdp_ram:
       .proc
*      Clear all
       clr  r0
       clr  r1
       li   r2,>4000
       bl   @vsmw
*      Bitmap
       li   r0,bitmap_src
       li   r1,bmp
       li   r2,>2000
       bl   @vmbw
*      Load palette
       li  r0,>2fc0                    ; Reg 47, DPM = 1, AUTO INC = 1
       li  r1,palette
       bl   @vwtr
       li  r2,32                       ; 32 bytes for 16 colors
load_palette_loop:
;       movb *r1+,*r15                  ; Every two bytes written to the VDP now go to the palette registers
       dec  r2
       jne  load_palette_loop
       li   r0,>2f00                   ; Reg 47, DPM = 0, AUTO INC = 0
       bl   @vwtr
*      Name table
       li   r0,name_table
       li   r1,>2000
       li   r2,screen_size_char
       bl   @vsmw
*      Tile attributes
       li   r0,tile_attr_table
       li   r1,>0100                   ; Use palette 1
       li   r2,>100
       bl   @vsmw
*      Sprite patterns
       li   r0,sprite_pattern_table
       li   r1,S0_0
       li   r2,32
       bl   @vmbw
       li   r0,sprite_pattern_table_p1
       li   r1,S1_0
       li   r2,32
       bl   @vmbw
*      Sprites off
       li   r0,sprite_attr_table
       li   r1,>f000
       bl   @vsbw
*      GPU program
       li   r0,gpu_program_tmp
       li   r1,gpu_prg_start
       li   r2,gpu_prg_end-gpu_prg_start
       bl   @vmbw
*      GPU data
       li   r0,gpu_data
       li   r1,gpu_data_start
       li   r2,gpu_data_end-gpu_data_start
       bl   @vmbw
       .endproc
*// init_vdp_ram

***************************************************************************
*
* Check key
*
* r0: Column in MSB: >0000 - >0700, Row in LSB: >0006 - >0014
*
*       Column   0      1    2    3    4    5     6       7
*     Row
*     >0006      =      .    ,    M    N    /    Fire    Fire
*     >0008    Space    L    K    J    H    ;    Left    Left
*     >000A    Enter    O    I    U    Y    P    Right   Right
*     >000C             9    8    7    6    0    Down    Down
*     >000E    Fctn     2    3    4    5    1    Up      Up
*     >0010    Shift    S    D    F    G    A
*     >0012    Ctrl     W    E    R    T    Q
*     >0014             X    C    V    B    Z
*
* On return NEQ means that the key is pressed
*
KEY_FI EQU  >0606
KEY_LF EQU  >0608
KEY_RG EQU  >060A
KEY_DN EQU  >060C
KEY_UP EQU  >060E
KEY_CM EQU  >0206
KEY_FS EQU  >0106
KEY_0  EQU  >050C
KEY_1  EQU  >050E
KEY_2  EQU  >010E
KEY_3  EQU  >020E
KEY_4  EQU  >030E
KEY_5  EQU  >040E
KEY_6  EQU  >040C
KEY_7  EQU  >030C
KEY_8  EQU  >020C
KEY_9  EQU  >010C
KEY_A  EQU  >0510
KEY_B  EQU  >0414
KEY_C  EQU  >0214
KEY_D  EQU  >0210
KEY_E  EQU  >0212
KEY_F  EQU  >0310
KEY_G  EQU  >0410
KEY_H  EQU  >0408
KEY_I  EQU  >020A
KEY_J  EQU  >0308
KEY_K  EQU  >0208
KEY_L  EQU  >0108
KEY_M  EQU  >0306
KEY_N  EQU  >0406
KEY_O  EQU  >010A
KEY_P  EQU  >050A
KEY_Q  EQU  >0512
KEY_R  EQU  >0312
KEY_S  EQU  >0110
KEY_T  EQU  >0412
KEY_U  EQU  >030A
KEY_V  EQU  >0314
KEY_W  EQU  >0112
KEY_X  EQU  >0114
KEY_Y  EQU  >040A
KEY_Z  EQU  >0514
KEY_SP EQU  >0008
KEY_EN EQU  >000A
KEY_FN EQU  >000E
KEY_SH EQU  >0010
KEY_CT EQU  >0012
JOY_FI EQU  >0606
JOY_LT EQU  >0608
JOY_RT EQU  >060A
JOY_DN EQU  >060C
JOY_UP EQU  >060E
*
check_key:
       li   r12,>0024                  ; CRU address of the column decoder
       ldcr r0,3                       ; Select column
       andi r0,>00ff
       mov  r0,r12                     ; Select row
       tb   0                          ; Test key, EQ if not pressed
       rt
*// check_key

***************************************************************************
*
* Program includes
*
       copy "vdp.a99"
       copy "math.a99"
gpu_prg_start:
       copy "gpu.a99"
gpu_prg_end:
       equ  $

lower_memory_max:
       equ  $

***************************************************************************
*
* Data
*
       aorg >a000

palette:
       DATA >0000,>0000,>00B0,>00F0
       DATA >0008,>000F,>0700,>00FF
       DATA >0C00,>0F00,>0BB0,>0FF0
       DATA >0060,>0C0B,>0CCC,>0FFF

***************************************************************************
*
* Data includes
*
       copy "data.a99"
gpu_data_start:
       copy "gpu_data.a99"
gpu_data_end:
       equ  $
bmp:
       bcopy "bitmap.bin"

upper_memory_max:
       equ  $

       end
